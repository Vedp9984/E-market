@startuml DollMart E-Commerce System

' Base User class
abstract class User {
  - user_id: str
  - name: str
  - email: str
  - password: str
  - is_logged_in: bool
  + login(password: str): bool
  + logout(): void
  + to_dict(): Dict
  + {static} from_dict(data: Dict): User
}

' Customer class
class Customer {
  - order_history: List[str]
  + place_order(e_store: EStore, items: List[Dict], payment_method: str): Optional[Order]
  + view_order_history(e_store: EStore): void
  + get_discount(): float
  + to_dict(): Dict
  + {static} from_dict(data: Dict): Customer
}

' RetailStore class
class RetailStore {
  - store_name: str
  - business_id: str
  + apply_bulk_discount(): float
  + manage_products(e_store: EStore): void
  + view_orders(e_store: EStore): void
  + manage_delivery(e_store: EStore): void
  - _view_all_products(e_store: EStore): void
  - _add_product(e_store: EStore): void
  - _update_product(e_store: EStore): void
  - _delete_product(e_store: EStore): void
  + to_dict(): Dict
  + {static} from_dict(data: Dict): RetailStore
}

' Admin class
class Admin {
  + view_orders(e_store: EStore): void
  + view_retail_stores(e_store: EStore): void
  + to_dict(): Dict
  + {static} from_dict(data: Dict): Admin
}

' Product class
class Product {
  - product_id: str
  - name: str
  - category: str
  - price: float
  - stock: int
  + update_stock(quantity_change: int): void
  + apply_discount(discount_percentage: float): float
  + to_dict(): Dict
  + {static} from_dict(data: Dict): Product
}

' Order class
class Order {
  - order_id: str
  - customer: Customer
  - items: List[Dict]
  - payment_method: str
  - status: str
  - total_price: float
  - date: str
  - discount_applied: Optional[Discount]
  - payment: Optional[Payment]
  - delivery: Optional[Delivery]
  + calculate_total(e_store: EStore): float
  + apply_discount(discount: Discount): void
  + track_order(): str
  + to_dict(): Dict
}

' Payment class
class Payment {
  - payment_id: str
  - order_id: str
  - method: str
  - status: str
  + process_payment(): bool
  + to_dict(): Dict
  + {static} from_dict(data: Dict): Payment
}

' Delivery class
class Delivery {
  - delivery_id: str
  - order_id: str
  - status: str
  - expected_date: str
  + update_status(new_status: str): void
  + to_dict(): Dict
  + {static} from_dict(data: Dict): Delivery
}

' Discount class
class Discount {
  - discount_id: str
  - type: str
  - value: float
  + apply_discount(price: float): float
  + to_dict(): Dict
  + {static} from_dict(data: Dict): Discount
}

' EStore singleton class
class EStore {
  - {static} _instance: EStore
  - users: List[User]
  - products: List[Product]
  - orders: List[Order]
  - discounts: List[Discount]
  - payments: List[Payment]
  - deliveries: List[Delivery]
  - retail_stores: List[RetailStore]
  + {static} get_instance(): EStore
  + search_product(query: str): List[Product]
  + add_product(product: Product): void
  + get_product(product_id: str): Optional[Product]
  + delete_product(product_id: str): bool
  + get_order(order_id: str): Optional[Order]
  + process_order(order: Order): void
  + get_user(email: str): Optional[User]
  + add_user(user: User): void
  + save_data(): void
  + load_data(): void
}

' CLI interface
class DollMartCLI {
  - e_store: EStore
  - current_user: Optional[User]
  + start(): void
  - _display_main_menu(): void
  - _register_user(): void
  - _login(): void
  - _check_login(): bool
  - _search_products(): void
  - _place_order(): void
}

' Define inheritance relationships
User <|-- Customer
Customer <|-- RetailStore
User <|-- Admin

' Define associations and dependencies
Customer "1" -- "*" Order: places >
RetailStore ..> Product: manages >
RetailStore ..> Delivery: manages >
Admin ..> Order: views >
Admin ..> RetailStore: views >

' Define compositions
EStore "1" *-- "*" Product: contains >
EStore "1" *-- "*" User: contains >
EStore "1" *-- "*" Order: contains >
EStore "1" *-- "*" Payment: processes >
EStore "1" *-- "*" Delivery: tracks >
EStore "1" *-- "*" Discount: offers >
EStore "1" *-- "*" RetailStore: lists >

' Define aggregations
Order "1" o-- "1" Payment: has >
Order "1" o-- "1" Delivery: has >
Order "1" o-- "0..1" Discount: applies >

' Define many-to-many relationships
Order "*" -- "*" Product: contains >

' Define usage relationships
DollMartCLI "1" --> "1" EStore: uses >
DollMartCLI --> User: interacts with >

' Add important notes

note right of User: "Abstract base class for all user types"
note right of Customer: "Regular customers get 5% discount"
note right of RetailStore: "Retail stores get 15% bulk discount"
note right of Order: "Status: Pending, Confirmed, In Transit, Delivered"
note right of Payment: "Status: Pending, Completed, Failed"
note right of Delivery: "Status: Processing, Shipped, Out for Delivery, Delivered"

@enduml